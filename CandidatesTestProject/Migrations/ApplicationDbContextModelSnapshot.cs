// <auto-generated />
using System;
using CandidatesTestProject.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CandidatesTestProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CandidatesTestProject.Models.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateDataId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WorkSchedule")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CandidateDataId")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedAt");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("CandidatesTestProject.Models.CandidateData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("CandidateData");
                });

            modelBuilder.Entity("CandidatesTestProject.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateDataId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CandidateDataId")
                        .IsUnique();

                    b.HasIndex("HireDate");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CandidatesTestProject.Models.SocialNetwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CandidateDataId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Username");

                    b.HasIndex("CandidateDataId", "Type", "Username");

                    b.ToTable("SocialNetworks");
                });

            modelBuilder.Entity("CandidatesTestProject.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CandidatesTestProject.Models.Verification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PerformedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("SearchFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SearchLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("PerformedByUserId");

                    b.ToTable("Verifications");
                });

            modelBuilder.Entity("CandidatesTestProject.Models.VerificationEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("EntityType")
                        .HasColumnType("integer");

                    b.Property<Guid>("FoundEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VerificationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VerificationId", "EntityType", "FoundEntityId");

                    b.ToTable("VerificationEvents");
                });

            modelBuilder.Entity("CandidatesTestProject.Models.Candidate", b =>
                {
                    b.HasOne("CandidatesTestProject.Models.CandidateData", "CandidateData")
                        .WithOne("Candidate")
                        .HasForeignKey("CandidatesTestProject.Models.Candidate", "CandidateDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CandidatesTestProject.Models.User", "CreatedBy")
                        .WithMany("CreatedCandidates")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CandidateData");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("CandidatesTestProject.Models.Employee", b =>
                {
                    b.HasOne("CandidatesTestProject.Models.CandidateData", "CandidateData")
                        .WithOne("Employee")
                        .HasForeignKey("CandidatesTestProject.Models.Employee", "CandidateDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateData");
                });

            modelBuilder.Entity("CandidatesTestProject.Models.SocialNetwork", b =>
                {
                    b.HasOne("CandidatesTestProject.Models.CandidateData", "CandidateData")
                        .WithMany("SocialNetworks")
                        .HasForeignKey("CandidateDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateData");
                });

            modelBuilder.Entity("CandidatesTestProject.Models.Verification", b =>
                {
                    b.HasOne("CandidatesTestProject.Models.User", "PerformedBy")
                        .WithMany("PerformedVerifications")
                        .HasForeignKey("PerformedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PerformedBy");
                });

            modelBuilder.Entity("CandidatesTestProject.Models.VerificationEvent", b =>
                {
                    b.HasOne("CandidatesTestProject.Models.Verification", "Verification")
                        .WithMany("Events")
                        .HasForeignKey("VerificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Verification");
                });

            modelBuilder.Entity("CandidatesTestProject.Models.CandidateData", b =>
                {
                    b.Navigation("Candidate");

                    b.Navigation("Employee");

                    b.Navigation("SocialNetworks");
                });

            modelBuilder.Entity("CandidatesTestProject.Models.User", b =>
                {
                    b.Navigation("CreatedCandidates");

                    b.Navigation("PerformedVerifications");
                });

            modelBuilder.Entity("CandidatesTestProject.Models.Verification", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
